{
  
    
        "post0": {
            "title": "Setup the IJava jupyter kernel",
            "content": "In this blog, we will show code snippets and examples to make the best use of ImgLib2, BigDataViewer, and friends. ImgLib2 is written to be fast and we will run code that needs to be compiled, so we cannot use any of the various interpreted scripting languages like Python, Groovy, or Javascript. Instead, we will use the JShell tool that you can use directly in a terminal or through Spencer Park’s IJava jupyter kernel. You can also follow these tutorials in your own Java project and use your preferred IDE, but Jupyter notebooks are a great teaching tool. Since jupyter is written in Python and most popular with the Python community, let’s follow their ways and first thing create a virtual environment with conda. The lack of version controlled dependency management for Python projects makes it necessary that practically every project must run in a container or virtual environment because the dependencies of different projects almost inevitably collide. Conda is the most popular of several attempts to address this situation. Conda cannot currently be installed from the default Ubuntu repositories, so much about that, but the installation instructions are tolerable, there is a PPA. Now let’s create an environment for jupyter: . conda create -n jshell-jupyter python=3 conda init bash conda activate jshell-jupyter conda install jupyter conda install openjdk conda install -c conda-forge maven . This may take a day of solving environments, so you may not want to wait for this and use your global Java and Maven installations instead. The IJava kernel currently does not build with Java 17 or 18, so the easiest at this time is to make it with OpenJDK-11. If you don’t have it yet, install it: . sudo apt install openjdk-11-jdk maven . If you have other versions installed, you can switch between them with the alternatives tool: . sudo update-alternatives --config java sudo update-alternatives --config javac . Now check out IJava and build and install the kernel IJava Jupyter kernel following the installation instructions or: . git clone https://github.com/SpencerPark/IJava.git cd IJava/ ./gradlew installKernel jupyter kernelspec list . This should print something like this . Available kernels: java /home/saalfeld/.local/share/jupyter/kernels/java python3 /home/saalfeld/anaconda3/envs/jshell-jupyter/share/jupyter/kernels/python3 . You can now start the jupyter notebook server . jupyter notebook --kernel=java . And experiment with the examples. Spencer Park’s IJava jupyter kernel makes it very easy to include dependencies. You can include the relevant snippets from a Maven POM into a tagged code block, e.g. . %%loadFromPOM &lt;repository&gt; &lt;id&gt;scijava.public&lt;/id&gt; &lt;url&gt;https://maven.scijava.org/content/groups/public&lt;/url&gt; &lt;/repository&gt; &lt;dependency&gt; &lt;groupId&gt;sc.fiji&lt;/groupId&gt; &lt;artifactId&gt;bigdataviewer-vistools&lt;/artifactId&gt; &lt;version&gt;1.0.0-beta-29&lt;/version&gt; &lt;/dependency&gt; . If you prefer to run JShell directly, you can pull in the dependencies from a complete Maven POM with John Pooth’s Maven Jshell plugin . mvn compile com.github.johnpoth:jshell-maven-plugin:1.3:run . Happy JShelling! .",
            "url": "https://imglib.github.io/imglib2-blog/jupyter/ijava/jshell/java/kernel/2022/06/05/setup-ijava-jupyter-kernel.html",
            "relUrl": "/jupyter/ijava/jshell/java/kernel/2022/06/05/setup-ijava-jupyter-kernel.html",
            "date": " • Jun 5, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "ImgLib2 is a general-purpose, multidimensional image and data processing library. . It provides a unified API to work with discrete and continuous n-dimensional data. This API is interface driven and therefore extensible at will. . ImgLib2 includes implementations of standard numeric and non-numeric data types (8-bit unsigned integer, 32-bit floating point, …) as well as a number of less typical data types (complex 64-bit floating point, 64-bit ARGB, base pairs, …). Data values can be accessed directly or through on-the-fly converters or multi-variate functions. . For discrete data (images, n-dimensional arrays), ImgLib2 implements a variety of memory layouts, data generation, loading, and caching strategies, including data linearized into single primitive arrays, series of arrays, n-dimensional arrays of arrays (“cells”), stored in memory, generated or loaded from disk on demand, and cached in memory or on disk. Coordinates and values can be accessed directly or through on-the-fly views that invert or permute axes, generate hyperslices or stack slices top higher dimensional datasets, collapse dimensions into vectors . For continuous data (functions, n-dimensional interpolants), ImgLib2 implements a variety of interpolators, geometric transformations, and generator functions. Coordinates and values can be accessed directly or transformed on-the-fly. . Need a quick start? Install OpenJDK and maven: . sudo apt install openjdk-16-jdk maven . Then check out BigDataViewer vistools: . git clone https://github.com/bigdataviewer/bigdataviewer-vistools.git . Then start JShell in the BigDataViewer vistools project directory: . cd bigdataviewer-vistools mvn compile com.github.johnpoth:jshell-maven-plugin:1.3:run . Then try out this code snippet: . import bdv.util.*; import net.imglib2.position.FunctionRealRandomAccessible; import net.imglib2.type.numeric.integer.IntType; import net.imglib2.util.Intervals; BdvFunctions.show(new FunctionRealRandomAccessible&lt;IntType&gt;(2, (x, y) -&gt; { int i = 0; double v = 0, c = x.getDoublePosition(0), d = x.getDoublePosition(1); for (; i &lt; 64 &amp;&amp; v &lt; 4096; ++i) { final double e = c * c - d * d; d = 2 * c * d; c = e + 0.2; d += 0.6; v = Math.sqrt(c * c + d * d); ++i; } y.set(i); }, IntType::new), Intervals.createMinMax(-1, -1, 1, 1), &quot;&quot;, BdvOptions.options().is2D()).setDisplayRange(0, 64); .",
          "url": "https://imglib.github.io/imglib2-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://imglib.github.io/imglib2-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}